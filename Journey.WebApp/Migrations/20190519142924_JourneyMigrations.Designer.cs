// <auto-generated />
using System;
using JourneyWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JourneyWebApp.Migrations
{
    [DbContext(typeof(JourneyDBContext))]
    [Migration("20190519142924_JourneyMigrations")]
    partial class JourneyMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JourneyWebApp.Data.AlbumPhoto", b =>
                {
                    b.Property<long>("AlbumId")
                        .HasColumnName("AlbumID");

                    b.Property<long>("PhotoId")
                        .HasColumnName("PhotoID");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("SequenceNumber");

                    b.HasKey("AlbumId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("AlbumPhoto");
                });

            modelBuilder.Entity("JourneyWebApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<long?>("TravelerId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TravelerId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("JourneyWebApp.Data.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("CityState")
                        .HasMaxLength(40);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("JourneyWebApp.Data.Traveler", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutMe")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email2")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .HasMaxLength(40);

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Hobbies")
                        .HasMaxLength(1000);

                    b.Property<string>("LastName")
                        .HasMaxLength(40);

                    b.Property<string>("Occupation")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("SocialMedia")
                        .HasMaxLength(1000);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Traveler");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelerAlbum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("Thumbnail");

                    b.Property<long>("TravelerId")
                        .HasColumnName("TravelerID");

                    b.Property<long?>("TripId")
                        .HasColumnName("TripID");

                    b.HasKey("Id");

                    b.HasIndex("TravelerId");

                    b.HasIndex("TripId");

                    b.ToTable("TravelerAlbum");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelerPhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Loc")
                        .HasMaxLength(100);

                    b.Property<string>("PhotoName")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique()
                        .HasName("UQ__Traveler__48D910BDC44C4D2D");

                    b.ToTable("TravelerPhoto");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelerRelationships", b =>
                {
                    b.Property<long>("TravelerId1")
                        .HasColumnName("TravelerID1");

                    b.Property<long>("TravelerId2")
                        .HasColumnName("TravelerID2");

                    b.Property<bool?>("IsEmergencyContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isEmergencyContact")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsFollower")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isFollower")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("TravelerId1", "TravelerId2");

                    b.HasIndex("TravelerId2");

                    b.ToTable("TravelerRelationships");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelersCities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("HasLived")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hasLived")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("HasVisited")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hasVisited")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isCurrent")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TravelerAddress")
                        .HasMaxLength(200);

                    b.Property<long>("TravelerId")
                        .HasColumnName("TravelerID");

                    b.Property<bool?>("WantVisit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wantVisit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TravelerId");

                    b.ToTable("TravelersCities");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelersTrips", b =>
                {
                    b.Property<long>("TripId")
                        .HasColumnName("TripID");

                    b.Property<long>("TravelerId")
                        .HasColumnName("TravelerID");

                    b.HasKey("TripId", "TravelerId");

                    b.HasIndex("TravelerId");

                    b.ToTable("TravelersTrips");
                });

            modelBuilder.Entity("JourneyWebApp.Data.Trip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Descript")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Trip");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TripActivities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("money");

                    b.Property<string>("Currency")
                        .HasMaxLength(10);

                    b.Property<string>("Note")
                        .HasMaxLength(2000);

                    b.Property<long>("TripDetailsId")
                        .HasColumnName("TripDetailsID");

                    b.HasKey("Id");

                    b.HasIndex("TripDetailsId");

                    b.ToTable("TripActivities");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TripCities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<long>("TripId")
                        .HasColumnName("TripID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TripId");

                    b.ToTable("TripCities");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TripDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accomodation")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("AccomodationDetails")
                        .HasMaxLength(1000);

                    b.Property<string>("InboundTransportation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("InboundTransportationDetails")
                        .HasMaxLength(1000);

                    b.Property<string>("OutboundTransportation")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("OutboundTransportationDetails")
                        .HasMaxLength(1000);

                    b.Property<long>("TripCitiesId")
                        .HasColumnName("TripCitiesID");

                    b.HasKey("Id");

                    b.HasIndex("TripCitiesId");

                    b.ToTable("TripDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JourneyWebApp.Data.AlbumPhoto", b =>
                {
                    b.HasOne("JourneyWebApp.Data.TravelerAlbum", "Album")
                        .WithMany("AlbumPhoto")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK__AlbumPhot__Album__14270015");

                    b.HasOne("JourneyWebApp.Data.TravelerPhoto", "Photo")
                        .WithMany("AlbumPhoto")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK__AlbumPhot__Photo__151B244E");
                });

            modelBuilder.Entity("JourneyWebApp.Data.ApplicationUser", b =>
                {
                    b.HasOne("JourneyWebApp.Data.Traveler", "Traveler")
                        .WithMany()
                        .HasForeignKey("TravelerId");
                });

            modelBuilder.Entity("JourneyWebApp.Data.Traveler", b =>
                {
                    b.HasOne("JourneyWebApp.Data.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("JourneyWebApp.Data.Traveler", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelerAlbum", b =>
                {
                    b.HasOne("JourneyWebApp.Data.Traveler", "Traveler")
                        .WithMany("TravelerAlbum")
                        .HasForeignKey("TravelerId")
                        .HasConstraintName("FK__TravelerA__Trave__10566F31");

                    b.HasOne("JourneyWebApp.Data.Trip", "Trip")
                        .WithMany("TravelerAlbum")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__TravelerA__TripI__0F624AF8");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelerRelationships", b =>
                {
                    b.HasOne("JourneyWebApp.Data.Traveler", "TravelerId1Navigation")
                        .WithMany("TravelerRelationshipsTravelerId1Navigation")
                        .HasForeignKey("TravelerId1")
                        .HasConstraintName("FK__TravelerR__Trave__7B5B524B");

                    b.HasOne("JourneyWebApp.Data.Traveler", "TravelerId2Navigation")
                        .WithMany("TravelerRelationshipsTravelerId2Navigation")
                        .HasForeignKey("TravelerId2")
                        .HasConstraintName("FK__TravelerR__Trave__7C4F7684");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelersCities", b =>
                {
                    b.HasOne("JourneyWebApp.Data.City", "City")
                        .WithMany("TravelersCities")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Travelers__CityI__08B54D69");

                    b.HasOne("JourneyWebApp.Data.Traveler", "Traveler")
                        .WithMany("TravelersCities")
                        .HasForeignKey("TravelerId")
                        .HasConstraintName("FK__Travelers__Trave__09A971A2");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TravelersTrips", b =>
                {
                    b.HasOne("JourneyWebApp.Data.Traveler", "Traveler")
                        .WithMany("TravelersTrips")
                        .HasForeignKey("TravelerId")
                        .HasConstraintName("FK__Travelers__Trave__01142BA1");

                    b.HasOne("JourneyWebApp.Data.Trip", "Trip")
                        .WithMany("TravelersTrips")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__Travelers__TripI__00200768");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TripActivities", b =>
                {
                    b.HasOne("JourneyWebApp.Data.TripDetails", "TripDetails")
                        .WithMany("TripActivities")
                        .HasForeignKey("TripDetailsId")
                        .HasConstraintName("FK__TripActiv__TripD__6A30C649");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TripCities", b =>
                {
                    b.HasOne("JourneyWebApp.Data.City", "City")
                        .WithMany("TripCities")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__TripCitie__CityI__6383C8BA");

                    b.HasOne("JourneyWebApp.Data.Trip", "Trip")
                        .WithMany("TripCities")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK__TripCitie__TripI__6477ECF3");
                });

            modelBuilder.Entity("JourneyWebApp.Data.TripDetails", b =>
                {
                    b.HasOne("JourneyWebApp.Data.TripCities", "TripCities")
                        .WithMany("TripDetails")
                        .HasForeignKey("TripCitiesId")
                        .HasConstraintName("FK__TripDetai__TripC__6754599E");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JourneyWebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JourneyWebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JourneyWebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JourneyWebApp.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
